# rbtree (red-black tree)

	redâ€“black tree is a self-balancing binary search tree data structure.

## complexity

	Space:  O(N)
	Time:   Average   | Worst
	Search: O(log(N)) | O(log(N))
	Insert: O(log(N)) | O(log(N))
	Delete: O(log(N)) | O(log(N))

## properties

	1. Every node is either red or black.
	2. All null nodes are considered black.
	3. A red node does not have a red child.
	4. Every path from a given node to any of its leaf nodes goes through
		the same number of black nodes.
	5. (Conclusion) If a node N has exactly one child, the child must be red.
		If the child were black, its leaves would sit at a different black
		depth than N's null node (which is considered black by rule 2),
		violating requirement 4.

## trees:

	[ 6, 7, 5, 4, 9 ]

	     6B
	    / \
	   5B  7B
	  /     \
	 4R      9R

	+[ 1, 2, 3 ]

	      6B
	     / \
	    4R  7B
	   / \   \
	  2B  5B  9R
	 / \
	1R  3R

	left rotate:

	    g           g
	   / \         / \
	  p   u  -->  n   u
	 / \         / \
	s   n       p   r
	   / \     / \
	  l   r   s   l

	right rotate:

	      g         g
	     / \       / \
	    p   u --> n   u
	   / \       / \
	  n   s     l   p
	 / \           / \
	l   r         r   s

	insert fix:

		parent left, 'u' is red:

		    G         g
		   / \       / \
		  p   u --> P   U
		 /         /
		n         n

		LR:

		  G         G
		 / \       / \
		p   U --> p   U
		 \       /
		  n     n

		LL:

		    G         P
		   / \       / \
		  p   U --> n   g
		 /               \
		n                 U

		parent right, 'u' is red:

		  G         g
		 / \       / \
		u   p --> U   P
		     \         \
		      n         n

		RL:

		  G         G
		 / \       / \
		U   p --> U   p
		   /           \
		  n             n

		RR:

		  G          P
		 / \        / \
		U   p -->  g   n
		     \    /
		      n  U
